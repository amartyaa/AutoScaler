AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda function with cfn-response.
Parameters:
  StopScheduled:
    Default: cron(0 21 ? * 6 *)
    Description: enter an Schedule expression example cron(0 18 ? * MON-FRI *) in UTC
    Type: String
  StartScheduled:
    Default: cron(30 0 ? * 2 *)
    Description: enter an Schedule expression example cron(0 8 ? * MON-FRI * ) in UTC
    Type: String
  ASGLABEL:
    Default: ama:true
    Description: enter tags to filter ASG for scaleUp&Down, enter all to select all resources else give in tag:value format
    Type: String
  EC2LABEL:
    Default: ama:true
    Description: enter tags to filter ASG for scaleUp&Down, enter all to select all resources else give in tag:value format
    Type: String
  REGIONS:
    Default: eu-central-1,eu-west-1
    Description: enter comma seperated value of REGIONS
    Type: String
Resources:
  asgTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: Name
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: autoscheduler-table
  StopASG:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt Role.Arn
      Handler: index.lambda_handler
      Timeout: 300
      Environment:
        Variables:
          TABLE_NAME: !Ref asgTable
          ASG_LABEL: !Ref ASGLABEL
          EC2_LABEL: !Ref EC2LABEL
          REGIONS: !Ref REGIONS
      Code:
        ZipFile: |
          import os
          import boto3
          from datetime import datetime

          print("Lambda_trigerred at ", datetime.now())


          dynamodb = boto3.resource('dynamodb')



          def lambda_handler(event, context):
              for region in os.environ["REGIONS"].split(","):
                  asg_client = boto3.client('autoscaling',region_name=region)
                  ASGscaleDown(asg_client,region)
                  ec2 = boto3.resource('ec2',region_name=region)
                  Ec2ScaleDown(ec2,region)
                  
          def ASGscaleDown(client,region):
              label = str(os.environ['ASG_LABEL']).split(":")
              
              paginator = client.get_paginator('describe_auto_scaling_groups')
              page_iterator = paginator.paginate(
                  PaginationConfig={'PageSize': 100}
              )
              if label!="all":
                  key = "tag:"+label[0]
                  value = []
                  value.append(label[1])
                  filters=[
                          {'Name': key,'Values': value}
                      ]
                  autoscalinggroups = client.describe_auto_scaling_groups(Filters=filters)['AutoScalingGroups']
              else:
                  autoscalinggroups = client.describe_auto_scaling_groups()['AutoScalingGroups']
                  
              for asg in autoscalinggroups:
                  print(asg['AutoScalingGroupName'])
                  params = {
                      'Name' : asg['AutoScalingGroupName'],
                      'LastShutDownAt' : str(datetime.now()),
                      'MinSize' : asg['MinSize'],
                      'MaxSize' : asg['MaxSize'],
                      'DesiredCapacity' : asg['DesiredCapacity'],
                      'Region' : region,
                      'Type' : "ASG"
                  }
                  print(params)
                  
                  write_data_in_database(params)
                  response = client.update_auto_scaling_group(
                      AutoScalingGroupName=asg['AutoScalingGroupName'],
                      MinSize=0,
                      MaxSize=0,
                      DesiredCapacity=0,
                  )
                  
          def Ec2ScaleDown(ec2,client,region):
              label = str(os.environ['EC2_LABEL']).split(":")
              if label!="all":
                  key = "tag:"+label[0]
                  value = []
                  value.append(label[1])
                  filters=[
                          {'Name': 'instance-state-name', 'Values': ['running']},
                          {'Name': key,            'Values': value}
                      ]
              else:
                  filters=[
                          {'Name': 'instance-state-name', 'Values': ['running']},
                      ]
              instances = ec2.instances.filter(Filters=filters)
              instances.stop()
              
          def write_data_in_database(params):
              print('Writing DynamoDb')
              try:
                  dynamodb = boto3.resource('dynamodb')
                  table = dynamodb.Table(os.environ["TABLE_NAME"])
                  table.put_item(Item=params)
              except Exception as e:
                  print(f"DynamoDb Exception {e}!")
                  return False
              print("Data add successfully.")
              return True

      Description: Function that stops ASG
  permissionForEventsToInvokeStopASG:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt StopASG.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      "SourceArn": !GetAtt StopScheduledRule.Arn

  StartASG:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt Role.Arn
      Handler: index.lambda_handler
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Ref asgTable
          ASG_LABEL: !Ref ASGLABEL
          EC2_LABEL: !Ref EC2LABEL
          REGIONS: !Ref REGIONS
      Code:
        ZipFile: |
          import os
          import boto3
          from datetime import datetime

          print("Lambda_trigerred at ", datetime.now())





          dynamodb = boto3.resource('dynamodb')

          def Read_data_in_database():
              print('Reading DynamoDb')
              try:
                  dynamodb = boto3.resource('dynamodb')
                  table = dynamodb.Table(os.environ["TABLE_NAME"])
                  stoppedtb=table.scan()
              except Exception as e:
                  print(f"DynamoDb Exception {e}!")
                  return False
              print("Data read successfully.")
              return True


          def lambda_handler(event, context):
              
              print('Reading DynamoDb')
              try:
                  dynamodb = boto3.resource('dynamodb')
                  table = dynamodb.Table(os.environ["TABLE_NAME"])
                  stoppedtb=table.scan()
              except Exception as e:
                  print(f"DynamoDb Exception {e}!")
                  return False
              print("Data read successfully.")
              
              for asg in stoppedtb.get('Items', []):
                  client = boto3.client('autoscaling',region_name = asg['Region'])
                  check = client.describe_auto_scaling_groups(
                      AutoScalingGroupNames=[
                          asg['Name']
                      ],
                      )
                  if(check['AutoScalingGroups'] !=[] ):
                      response = client.update_auto_scaling_group(
                      AutoScalingGroupName=asg['Name'],
                      MinSize=int(asg['MinSize']),
                      MaxSize=int(asg['MaxSize']),
                      DesiredCapacity=int(asg['DesiredCapacity']),
                  )
                  else:
                    print(asg['Name'],'not found in AutoScaling Groups')
              print("All ASGs scaled up")
              
              for region in os.environ["REGIONS"].split(","):
                  ec2 = boto3.resource('ec2',region_name=region)
                  Ec2ScaleUp(ec2,region)
              
          def Ec2ScaleUp(ec2,region):
              label = str(os.environ['EC2_LABEL']).split(":")
              if label!="all":
                  key = "tag:"+label[0]
                  value = []
                  value.append(label[1])
                  filters=[
                          {'Name': 'instance-state-name', 'Values': ['stopped']},
                          {'Name': key,            'Values': value}
                      ]
              else:
                  filters=[
                          {'Name': 'instance-state-name', 'Values': ['stopped']},
                      ]
              # print(type(filters))
              instances = ec2.instances.filter(Filters=filters)
              instances.start()




          

      Description: Function that starts instances
  permissionForEventsToInvokeStartASG:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt StartASG.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      "SourceArn": !GetAtt StartScheduledRule.Arn

  Role:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${AWS::StackName}-StartStopRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: StartASGpermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:Scan"
                  - "logs:CreateLogGroup"
                  - "autoscaling:*"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "ec2:*"
                Resource: "*"
  StopScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: !Ref StopScheduled
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt StopASG.Arn
          Id: "TargetFunctionV1"
  StartScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: !Ref StartScheduled
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt StartASG.Arn
          Id: "TargetFunctionV1"